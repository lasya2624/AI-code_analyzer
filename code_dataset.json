[
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def fibonacci(n): return n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)",
        "explanation": "This function calculates the nth Fibonacci number using recursion.",
        "documentation": "### Description:\nComputes the nth Fibonacci number recursively.\n\n### Args:\n- **n (int)**: The position in the Fibonacci sequence.\n\n### Returns:\n- **int**: The nth Fibonacci number."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    },
    {
        "code": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "explanation": "This function checks if a number is prime.",
        "documentation": "### Description:\nChecks if a number is prime.\n\n### Args:\n- **n (int)**: The number to check.\n\n### Returns:\n- **bool**: `True` if the number is prime, `False` otherwise."
    },
    {
        "code": "def multiply(a, b): return a * b",
        "explanation": "This function multiplies two numbers and returns the result.",
        "documentation": "### Description:\nMultiplies two numbers.\n\n### Args:\n- **a (int)**: First number.\n- **b (int)**: Second number.\n\n### Returns:\n- **int**: The product of `a` and `b`."
    },
    {
        "code": "def reverse_string(s): return s[::-1]",
        "explanation": "This function reverses a given string.",
        "documentation": "### Description:\nReverses a string.\n\n### Args:\n- **s (str)**: The string to reverse.\n\n### Returns:\n- **str**: The reversed string."
    },
    {
        "code": "def add(a, b): return a + b",
        "explanation": "This function adds two numbers and returns their sum.",
        "documentation": "### Description:\nAdds two numbers.\n\n### Args:\n- **a (int)**: The first number.\n- **b (int)**: The second number.\n\n### Returns:\n- **int**: The sum of `a` and `b`."
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "explanation": "This function calculates the factorial of a number using recursion.",
        "documentation": "### Description:\nComputes the factorial of a number.\n\n### Args:\n- **n (int)**: The number to calculate factorial for.\n\n### Returns:\n- **int**: The factorial of `n`."
    }
]